// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go

// Package file is a generated GoMock package.
package file

import (
	models "file_storage_service/internal/models"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfileProvicer is a mock of fileProvicer interface.
type MockfileProvicer struct {
	ctrl     *gomock.Controller
	recorder *MockfileProvicerMockRecorder
}

// MockfileProvicerMockRecorder is the mock recorder for MockfileProvicer.
type MockfileProvicerMockRecorder struct {
	mock *MockfileProvicer
}

// NewMockfileProvicer creates a new mock instance.
func NewMockfileProvicer(ctrl *gomock.Controller) *MockfileProvicer {
	mock := &MockfileProvicer{ctrl: ctrl}
	mock.recorder = &MockfileProvicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileProvicer) EXPECT() *MockfileProvicerMockRecorder {
	return m.recorder
}

// GetAllFiles mocks base method.
func (m *MockfileProvicer) GetAllFiles() ([]models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFiles")
	ret0, _ := ret[0].([]models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFiles indicates an expected call of GetAllFiles.
func (mr *MockfileProvicerMockRecorder) GetAllFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFiles", reflect.TypeOf((*MockfileProvicer)(nil).GetAllFiles))
}

// UploadFile mocks base method.
func (m *MockfileProvicer) UploadFile(file multipart.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockfileProvicerMockRecorder) UploadFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockfileProvicer)(nil).UploadFile), file)
}
